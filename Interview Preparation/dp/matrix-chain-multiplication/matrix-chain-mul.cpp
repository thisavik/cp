#include <bits/stdc++.h>

using namespace std;

// Top-Down
int helperRec(int i, int j, vector<int> &dimension, vector<vector<int>> &dp) 
{
  // if there is only one matrix then cost = 0
  if(i == j)
    return 0;
  if(dp[i][j] != -1)
    return dp[i][j];
  int minCost = INT_MAX;
  for(int k = i; k < j; k++) 
  {
    int cost = 
      // solve for (i, k) matrix
      helperRec(i, k, dimension, dp) + 
      // solve for (k+1, j) mastrix
      helperRec(k+1, j, dimension, dp) + 
      // add cost of solving matrix generated by (i, k) and (k+1, j)
      dimension[i] * dimension[k+1] * dimension[j+1];
    minCost = min(minCost, cost);
  }
  return dp[i][j] = minCost;
}

int helper(vector<int> &dimension) 
{
  int n = dimension.size();
  vector<vector<int>> dp(n, vector<int>(n, -1));
  return helperRec(0, n-2, dimension, dp);
}

// Bottom-Up
int helper2(vector<int> &dimension)
{
  int n = dimension.size();
  vector<vector<int>> dp(n, vector<int>(n, 0));

  for(int len = 1; len <= n-1; len++) 
  {
    for(int i = 0; i+len-1 <= n-2; i++) 
    {
      int j = i+len-1;
      if(i == j)
      {
        // if there is only one matrix then cost = 0
        dp[i][j] = 0;
        continue;
      }
      dp[i][j] = INT_MAX;
      for(int k = i; k < j; k++)
      {
        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + dimension[i] * dimension[k+1] * dimension[j+1]);
      }
    }
  }
  return dp[0][n-2];
}
int32_t main()
{
  int n = 5;
  // cin >> n;
  vector<int> dimension {40, 20, 30, 10, 30};
  // for(auto &val: dimension)
  //   cin >> val;
  cout << helper2(dimension);
}